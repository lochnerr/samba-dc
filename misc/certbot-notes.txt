#!/bin/sh

DIGEST=-sha512
KEYSIZE=4096
ABBR=certbot.clone1.com

# Generate private key.
openssl genrsa -out ${ABBR}.key $KEYSIZE

# Generate certificate signing request.
openssl req \
  -new -key ${ABBR}.key -out ${ABBR}.csr \
  -subj "/CN=${ABBR}" $DIGEST \
  -reqexts SAN \
  -config <(cat /etc/pki/openssl10.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:${ABBR}"))

# Display the csr.
openssl req -noout -text -in ${ABBR}.csr

exit 0

/usr/bin/certbot certonly --non-interactive --keep-until-expiring --standalone -d www.example.com --email admin@example.com --agree-tos --dry-run

/usr/bin/certbot certonly --non-interactive --keep-until-expiring \
  --standalone --agree-tos --email lochner@clone1.com --preferred-challenges http \
  --csr /etc/letsencrypt/certbot.clone1.com.csr --dry-run

####
openssl x509 -noout -in /0000_chain.pem -subject -issuer


# Verify cert with chain.
sudo openssl verify -untrusted certbot/etc/letsencrypt/live/certbot.clone1.com/chain.pem certbot/etc/letsencrypt/live/certbot.clone1.com/cert.pem

# Display cert.
sudo openssl x509 -in certbot/etc/letsencrypt/live/certbot.clone1.com/cert.pem -text -noout


rlochner
qkHTrZdk

HUuVIStj

=====

##mkdir -p /root/certbot.clone1.com

# The normal way.
/usr/bin/certbot certonly --non-interactive --keep-until-expiring --rsa-key-size 4096 \
  --email lochner@clone1.com --agree-tos --preferred-challenges http \
  --standalone -d certbot.clone1.com --dry-run

# The webroot way.
/usr/bin/certbot certonly --non-interactive --keep-until-expiring --rsa-key-size 4096 \
  --email lochner@clone1.com --agree-tos --preferred-challenges http \
  --webroot -w /usr/share/nginx/html -d certbot.clone1.com --force-renewal --dry-run

#  --webroot -w /usr/share/nginx/${domain}/html -d ${domain} --force-renewal --dry-run

# The csr way.
domain="certbot.clone1.com"
dir="/etc/letsencrypt/requests"
mkdir -p ${dir}/${domain}
/usr/bin/certbot certonly --non-interactive --keep-until-expiring \
  --email lochner@clone1.com --agree-tos --preferred-challenges http \
  --standalone --csr ${dir}/csr.pem \
  --cert-path        ${dir}/cert.pem \
  --fullchain-path   ${dir}/fullchain.pem \
  --chain-path       ${dir}/chain.pem \
  --dry-run

Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator standalone, Installer None
Performing the following challenges:
http-01 challenge for certbot.clone1.com
Waiting for verification...
Cleaning up challenges
Server issued certificate; certificate written to /0000_cert.pem
Cert chain written to 8
Cert chain written to 9

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /0001_chain.pem
   Your cert will expire on 2019-10-21. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot
   again. To non-interactively renew *all* of your certificates, run
   "certbot renew"
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le

=====

$ sudo ls -lR certbot/etc/letsencrypt/live

certbot/etc/letsencrypt/live:
drwxr-xr-x 2 root root 4096 Jul 23 18:51 certbot.clone1.com
-rw-r--r-- 1 root root  740 Jul 23 18:51 README

certbot/etc/letsencrypt/live/certbot.clone1.com:
lrwxrwxrwx 1 root root  42 Jul 23 18:51 cert.pem -> ../../archive/certbot.clone1.com/cert1.pem
lrwxrwxrwx 1 root root  43 Jul 23 18:51 chain.pem -> ../../archive/certbot.clone1.com/chain1.pem
lrwxrwxrwx 1 root root  47 Jul 23 18:51 fullchain.pem -> ../../archive/certbot.clone1.com/fullchain1.pem
lrwxrwxrwx 1 root root  45 Jul 23 18:51 privkey.pem -> ../../archive/certbot.clone1.com/privkey1.pem
-rw-r--r-- 1 root root 692 Jul 23 18:51 README

/etc/letsencrypt/live/certbot.clone1.com/cert.pem
/etc/letsencrypt/live/certbot.clone1.com/chain.pem
/etc/letsencrypt/live/certbot.clone1.com/fullchain.pem
/etc/letsencrypt/live/certbot.clone1.com/privkey.pem


## /path/to/http/authenticator.sh

#!/bin/bash
# Drawbacks.
# 1) Must have ssh access to server (non-root).
# 2)
echo $CERTBOT_VALIDATION > $CERTBOT_TOKEN
scp -o IdentitiesOnly=True -i ~/.ssh/id_rsa_server_user $CERTBOT_TOKEN user@server:challenges/

## Restricted command ssh login, this is the ticket!!!
ssh -o IdentitiesOnly=True -i ~/.ssh/id_rsa_certbot_user certbot_restricted_user@certbot_host authenticate $CERTBOT_DOMAIN $CERTBOT_VALIDATION $CERTBOT_TOKEN
ssh -o IdentitiesOnly=True -i ~/.ssh/id_rsa_certbot_user certbot_restricted_user@certbot_host cleanup      $CERTBOT_DOMAIN $CERTBOT_VALIDATION $CERTBOT_TOKEN

## /path/to/http/cleanup.sh

#!/bin/bash
rm -f /var/www/htdocs/.well-known/acme-challenge/$CERTBOT_TOKEN

# For pbx.wincretail.com: NOTE: This may be a problem for Twilio...
location /.well-known/acme-challenge/ {
    proxy_pass http://wincpbx.is-certified.com/.well-known/acme-challenge/;
}

nano vpn server port 1195 
sudo docker run -d --net=host certbot-vpn-server

certbot client
sudo docker run -it certbot-vpn-client


awsgit   eip 54.88.142.153
awsnano   ip 52.91.143.171

ssh -L 127.0.0.1:80:awsgit:80 gw.example.com

  all clone1 letsencrypt validations go to nano

  ssh map nano:80 -> localhost:8000
  run certbot port 8000
  ssh unmap localhost:8000

CERTBOT Problems:
1) Getting certbot to generate the certificate.
   a) Certbot server as reverse proxy for acme challenge from web hosts.
2) Getting the keys and/or certs to the systems that need them.

1) Jenny can't open 80 due to U-Verse
   Fix: pbx.wincretail.com proxy to port 80xx, router forward 80xx to 192.168.20.3:80.
        No can do because Twilio needs pbx.wincretail.com
        Alternate would be pbx.ad.wincretail.com
2) Rick no IPv4 or IPv6 incoming address.
Same problem, different cause.
Possible solutions...
1) ssh open local port on cloud host and
   run ssh locally...would need reverse proxy to change
pbx.wincretail.com:80    -> certbot.clone1.com:80 (rev proxy) -> pbx.wincretail.com:8080 -> 192.168.20.3:80 (via router)
dc1.ad.wincretail.com:80 -> certbot.clone1.com:80 (rev proxy) -> pbx.wincretail.com:8080 -> 192.168.20.3:80 (via router)
dc2.ad.wincretail.com:80 -> certbot.clone1.com:80 (rev proxy) -> pbx.wincretail.com:8080 -> 192.168.20.3:80 (via router)
pbx.ad.wincretail.com:80 -> certbot.clone1.com:80 (rev proxy) -> pbx.wincretail.com:8080 -> 192.168.20.3:80 (via router)
    ad.wincretail.com:80 -> certbot.clone1.com:80 (rev proxy) -> pbx.wincretail.com:8080 -> 192.168.20.3:80 (via router)
dc1.ad.clone1.com:80     -> certbot.clone1.com:80 (rev proxy) -> 127.0.0.1:8080
dc2.ad.clone1.com:80     -> certbot.clone1.com:80 (rev proxy) -> 127.0.0.1:8080
    ad.clone1.com:80     -> certbot.clone1.com:80 (rev proxy) -> 127.0.0.1:8080




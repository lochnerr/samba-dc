#!/bin/sh

# Samba Domain Controller test functions.

# Test counters.
tests=0
passed=0
optional=0
errs=0

log_warn() {
  echo "WARNING: $1"
}

log_pass() {
  tests=$((tests+1))
  passed=$((passed+1))
  if [ -n "$1" ]; then
    echo "$1 test passed!"
  fi
}

log_fail() {
  tests=$((tests+1))
  errs=$((errs+1))
  log_warn "$1 test failed."
}

log_fail_optional() {
  tests=$((tests+1))
  optional=$((optional+1))
  log_warn "$1 optional test failed."
}

test_nsupdate() {

  if [ "$BACKEND" != "BIND9_DLZ" ]; then
    echo "********************************************************************************************"
    echo "* Note: When using the SAMBA_INTERNAL backend, the following is a spurious benign message: *"
    echo "* ; TSIG error with server: tsig verify failure                                            *"
    echo "********************************************************************************************"
  fi

  KEYDIR="$STATEDIR"
  SETPRINCIPAL="dhcpduser@${REALM}"
  test="Kerberos kinit for ${SETPRINCIPAL}"
  kinit -F -k -t $KEYDIR/dhcpduser.keytab "${SETPRINCIPAL}"
  if [ "$?" != "0" ]; then
    log_fail_optional "$test"
    log_warn "Unable to run nsupdate tests."
    # The remaining tests will fail without a kerberos ticket so no point in continuing.
    return
  else
    log_pass "$test"
  fi

  #NSUPDFLAGS="-d"
  name="nstest"
  # Use the dummy address for the HOST_IP x.x.x.250 as the ip.
  ip="$(echo ${HOST_IP} | awk -F '.' '{print $1 "." $2 "." $3 ".250" }')"
  ptr=$(echo ${ip} | awk -F '.' '{print $4"."$3"."$2"."$1".in-addr.arpa"}')

  # Add the nstest host record.
  nsupdate -g ${NSUPDFLAGS} <<-UPDATE
	server $HOST_IP
	realm ${REALM}
	update delete ${name}.${DOMAIN} 3600 A
	update add ${name}.${DOMAIN} 3600 A ${ip}
	send
	UPDATE

  result1=$?

  # Check the tcp-based ns_test A record in the domain.
  test="Lookup of record type A ${name}.${DOMAIN}."
  if ! host -t A ${name}.${DOMAIN}. ; then
    log_fail_optional "$test"
  else
    log_pass "$test"
    result1="0"
  fi

  # Add the nstest ptr record.
  nsupdate -g ${NSUPDFLAGS} <<-UPDATE
	server $HOST_IP
	realm ${REALM}
	update delete ${ptr} 3600 PTR
	update add ${ptr} 3600 PTR ${name}.${DOMAIN}
	send
	UPDATE

  result2=$?

  # Check the tcp-based reverse ptr for ns_test in the domain.
  test="Lookup of record type PTR for $ip"
  if ! host -t PTR $ip 2>&1 >/dev/null ; then
    log_fail_optional "$test"
  else
    log_pass "$test"
    result2="0"
  fi

  result3="."
  if [ "$result1" = "0" ]; then
    # Delete the nstest records.
    nsupdate -g ${NSUPDFLAGS} <<-UPDATE
	server $HOST_IP
	realm ${REALM}
	update delete ${name}.${DOMAIN} 3600 A
	send
	UPDATE

    result3=$?

    # Verify that the ns_test A record in the domain has been deleted.
    test="Delete of record type A ${name}.${DOMAIN}."
    if host -t A ${name}.${DOMAIN}. ; then
      log_fail_optional "$test"
    else
      log_pass "$test"
      result3="0"
    fi
  fi

  result4="."
  if [ "$result2" = "0" ]; then
    nsupdate -g ${NSUPDFLAGS} <<-UPDATE
	server $HOST_IP
	realm ${REALM}
	update delete ${ptr} 3600 PTR
	send
	UPDATE

    result4=$?

    # Verify that the reverse ptr for ns_test in the domain has been deleted.
    test="Delete of record type PTR for $ip"
    if host -t PTR $ip 2>&1 >/dev/null ; then
      log_fail_optional "$test"
    else
      echo "$test"
      result4="0"
    fi
  fi

  echo "nsupdate test results: $result1:$result2:$result3:$result4"
}

test_samba() {

  # Some of the tests can only be checked by allowing them to fail
  # and checking the status after so errexit must be disabled.
  set +o errexit

  # Verifying the File Server

  # Only run this test if smbclient is available.
  if [ -n "$(command -v smbclient 2> /dev/null)" ]; then
    test="smbclient -L $HOST_IP -U%"
    if ! smbclient -L $HOST_IP -U% ; then
      log_fail "$test"
    else
      log_pass "$test"
    fi
    test="smbclient //${HOST_NAME}.${DOMAIN}/netlogon -U administrator -k -c 'ls'"
    echo "$PASSWORD" | kinit Administrator
    smbclient //${HOST_NAME}.${DOMAIN}/netlogon -U administrator -k -c 'ls' 2>&1
    if [ "$?" != "0" ]; then
      log_fail "$test"
    else
      log_pass "$test"
    fi
  fi

  # Verifying DNS

  # Check the tcp-based _ldap SRV record in the domain.

  test="Lookup of record type SRV _ldap._tcp.${DOMAIN}."
  if ! host -t SRV _ldap._tcp.${DOMAIN}. ; then
    log_fail "$test"
  else
    log_pass "$test"
  fi

  # Check the udp-based _kerberos SRV resource record in the domain.

  test="Lookup of record type SRV _kerberos._udp.${DOMAIN}."
  if ! host -t SRV _kerberos._udp.${DOMAIN}. ; then
    log_fail "$test"
  else
    log_pass "$test"
  fi

  # Check the A record of the domain controller.

  test="Lookup of record type A ${HOST_NAME}.${DOMAIN}."
  if ! host -t A ${HOST_NAME}.${DOMAIN}. ; then
    log_fail "$test"
  else
    log_pass "$test"
  fi

  # Verifying Kerberos

  test="kinit Administrator"
  echo "$PASSWORD" | kinit Administrator
  if [ "$?" != "0" ]; then
    log_fail "$test"
  else
    log_pass "$test"
    echo "Kerberos tickets:"
    klist
  fi

  # Verify nsupdate works with dhcpduser.
  test_nsupdate
}

test_stats() {

  echo "$tests tests run."
  echo "$passed tests passed."
  if [ "$optional" != "0" ]; then
    log_warn "$optional optional tests failed!"
  else
    echo "No optional tests failed."
  fi
  if [ "$errs" != "0" ]; then
    log_warn "$errs manditory tests failed!"
  else
    echo "No manditory tests failed."
  fi
}


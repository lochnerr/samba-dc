#!/bin/sh

# Samba Domain Controller test functions.

# Test counters.
tests=0
passed=0
optional=0
errs=0

log_warn() {
  echo "WARNING: $1"
}

log_pass() {
  tests=$((tests+1))
  passed=$((passed+1))
  if [ -n "$1" ]; then
    echo "$1 test passed!"
  fi
}

log_fail() {
  tests=$((tests+1))
  errs=$((errs+1))
  log_warn "$1 test failed."
}

log_fail_optional() {
  tests=$((tests+1))
  optional=$((optional+1))
  log_warn "$1 optional test failed."
}

nsupdate_add() {

  key="$1"
  ref="$2"
  type="${3:-A}"
  dur="${4:-3600}"

  # Deleta and Add a record.
  nsupdate -g ${NSUPDFLAGS} <<-UPDATE
	server $HOST_IP
	realm ${REALM}
	update delete $key $dur $type
	update add $key $dur $type $ref
	send
	UPDATE

  result="$?"
  # Verify the record was added.
  test="Lookup $type record for ${key}"
  if ! host -t $type $key ; then
    log_fail_optional "$test"
    [ "$result" = "0" ] && result="X"
  else
    result="0"
    log_pass "$test"
  fi
}

nsupdate_del() {

  key="$1"
  type="${2:-A}"
  dur="${3:-3600}"

  # Deleta a record.
  nsupdate -g ${NSUPDFLAGS} <<-UPDATE
	server $HOST_IP
	realm ${REALM}
	update delete $key $dur $type
	send
	UPDATE

  result="$?"
  # Verify that the record was deleted.
  test="Delete $type record for $key"
  if host -t $type $key >/dev/null 2>&1 ; then
    log_fail_optional "$test"
    [ "$result" = "0" ] && result="X"
  else
    result="0"
    log_pass "$test"
  fi
}

test_nsupdate() {

  if [ "$BACKEND" != "BIND9_DLZ" ]; then
    echo "********************************************************************************************"
    echo "* Note: When using the SAMBA_INTERNAL backend, the following is a spurious benign message: *"
    echo "* ; TSIG error with server: tsig verify failure                                            *"
    echo "********************************************************************************************"
  fi

  test="Kerberos kinit for dhcpduser@${REALM}"
  kinit -F -k -t $PRIVATE_DIR/dhcpduser.keytab "dhcpduser@${REALM}"
  if [ "$?" != "0" ]; then
    log_fail_optional "$test"
    log_warn "Unable to run nsupdate tests."
    # The remaining tests will fail without a kerberos ticket so no point in continuing.
    return
  else
    log_pass "$test"
  fi

  #NSUPDFLAGS="-d"
  name="nstest"
  # Use the dummy address for the HOST_IP x.x.x.250 as the ip.
  ip="$(echo ${HOST_IP} | awk -F '.' '{print $1 "." $2 "." $3 ".250" }')"
  ptr=$(echo ${ip} | awk -F '.' '{print $4"."$3"."$2"."$1".in-addr.arpa"}')

  # Add the nstest host record.
  nsupdate_add  ${name}.${DOMAIN}  ${ip}  A
  result1="$result"

  # Add the nstest ptr record.
  nsupdate_add  ${ptr}  ${name}.${DOMAIN}  PTR
  result2="$result"

  result3="."
  if [ "$result1" = "0" ]; then
    # Delete the nstest host record, if it was successfully added.
    nsupdate_del ${name}.${DOMAIN}  A
    result3="$result"
  fi

  result4="."
  if [ "$result2" = "0" ]; then
    # Delete the nstest ptr record, if it was successfully added.
    nsupdate_del ${ptr}  PTR
    result4="$result"
  fi

  echo "nsupdate test results: $result1:$result2:$result3:$result4"
}

dns_lookup_test() {

  test="Lookup $1 record for $2"
  if ! host -t $1 $2 ; then
    log_fail "$test"
  else
    log_pass "$test"
  fi
}

test_samba() {

  # Some of the tests can only be checked by allowing them to fail
  # and checking the status after so errexit must be disabled.
  set +o errexit

  # Step 9.1: Verifying the File Server

  # Only run these tests if smbclient is available.
  if [ -n "$(command -v smbclient 2> /dev/null)" ]; then
    # List shares test, retry if necessary.
    test="smbclient -L $HOST_IP -U%"
    for try in $(seq -s ' ' 1 3) ; do
      smbclient -L $HOST_IP -U%
      rc="$?"
      if [ "$rc" != "0" ]; then
        echo "Retrying list shares test ($try)."
        sleep 10s
      else
        log_pass "$test"
        break
      fi
    done
    [ "$rc" != "0" ] && log_fail "$test"
    # Login test, retry if necessary.
    test="smbclient //${HOST_NAME}.${DOMAIN}/netlogon -U administrator -c 'ls'"
    for try in $(seq -s ' ' 1 3) ; do
      echo "$PASSWORD" | smbclient //${HOST_NAME}.${DOMAIN}/netlogon -U administrator -c 'ls' 2>&1
      rc="$?"
      if [ "$rc" != "0" ]; then
        echo "Retrying login test ($try)."
        sleep 10s
      else
        log_pass "$test"
        break
      fi
    done
    [ "$rc" != "0" ] && log_fail "$test"
  fi

  # Step 9.2: Verifying DNS

  # Check the tcp-based _ldap SRV record in the domain.
  dns_lookup_test SRV _ldap._tcp.${DOMAIN}.

  # Check the udp-based _kerberos SRV resource record in the domain.
  dns_lookup_test SRV _kerberos._udp.${DOMAIN}.

  # Check the A record of the domain controller.
  dns_lookup_test A ${HOST_NAME}.${DOMAIN}.

  # Step 9.3: Verifying Kerberos

  test="kinit Administrator"
  echo "$PASSWORD" | kinit Administrator
  if [ "$?" != "0" ]; then
    log_fail "$test"
  else
    log_pass "$test"
    echo "Kerberos tickets:"
    klist
  fi

  # Verify nsupdate works with dhcpduser.
  if [ -e $PRIVATE_DIR/dhcpduser.keytab ]; then
    test_nsupdate
  else
    echo "Warning: $PRIVATE_DIR/dhcpduser.keytab does not exist, cannot run nsupdate tests!"
  fi
}

test_stats() {

  echo "$tests tests run."
  echo "$passed tests passed."
  if [ "$optional" != "0" ]; then
    log_warn "$optional optional tests failed!"
  else
    echo "No optional tests failed."
  fi
  if [ "$errs" != "0" ]; then
    log_warn "$errs manditory tests failed!"
  else
    echo "No manditory tests failed."
  fi
}


#!/bin/sh

# samba-provision: Provision or join an Active Directory Domain.

# From: https://www.server-world.info/en/note?os=Fedora_41&p=samba&f=5
# Also: https://wiki.samba.org/index.php/Setting_up_Samba_as_an_Active_Directory_Domain_Controller

set -e

# This is only used in testing.
wait_for_file() {

	echo "Info: Waiting for signal file ${1}."
	# shellcheck disable=SC2034
	for try in $(seq 90) ; do
		[ -e "${1}" ] && break
		sleep 10s
	done
}

post_provisioning() {

	# TODO Get rid of global variables: HOST, HOST_IP and PASSWORD in here.

	if [ "${mode}" = "join" ]; then
		# In order for dynamic dns updates to work after joining a domain, the domain controllers
		# must be fully synchronized. This will happen normally over time, but forcing it here
		# allows the dynamic update tests to complete successfully.

		echo "Info: Manually replicating directory partitions."
		context=""
		sep=""
		for level in $(echo "${domain}" | tr '.' '\n') ; do
			context="${context}${sep}DC=${level}"
			sep=","
		done

		# Parameters that worked:     source          dest                  <naming context>
		#                             --------------- --------------------- -------------------------
		#    samba-tool drs replicate T-DC2           T-DCT                 dc=corp,dc=clone1,dc=com
		#    samba-tool drs replicate 192.168.122.6   T-DCT                 dc=corp,dc=clone1,dc=com
		#    samba-tool drs replicate 192.168.122.6   t-dc1.corp.clone1.com dc=corp,dc=clone1,dc=com
		#    samba-tool drs replicate 192.168.122.176 t-dc1.corp.clone1.com dc=corp,dc=clone1,dc=com
		echo samba-tool drs replicate "${2}" "${HOST}" "${context}"
		if ! samba-tool drs replicate "${2}" "${HOST}" "${context}" ; then
			echo "Replication failed, continuing anyway!"
		else
			echo "Replication succeeded!"
		fi

		# Show replication status.  The doesn't work without the delay for some reason.
		sleep 2s
		if ! samba-tool drs showrepl ; then
			echo "Warning: Show replication failed, continuing anyway!"
		fi
	fi

	# Create a reverse zone for this server, if needed.
	subnet="$(ip addr | grep "${HOST_IP}" | cut -d '/' -f2 | cut -d ' ' -f1)"
	echo "Info: ${HOST_IP} is in a /${subnet} subnet."
	[ "${subnet}" = "24" ] && revzone="$(echo "${HOST_IP}" | awk -F '.' '{print $3 "." $2 "." $1}')"
	[ "${subnet}" = "16" ] && revzone="$(echo "${HOST_IP}" | awk -F '.' '{print $2 "." $1}')"
	[ "${subnet}" = "8" ]  && revzone="$(echo "${HOST_IP}" | awk -F '.' '{print $1}')"
	
	if [ -z "${revzone}" ]; then
		echo "Warning: Unable to create reverse zone because the subnet is not /8, /16 or /24."
	else
		[ "${subnet}" = "24" ] && node="$(echo "${HOST_IP}" | awk -F '.' '{print $4}')"
		[ "${subnet}" = "16" ] && node="$(echo "${HOST_IP}" | awk -F '.' '{print $4 "." $3}')"
		[ "${subnet}" = "8" ]  && node="$(echo "${HOST_IP}" | awk -F '.' '{print $4 "." $3 "." $2}')"
		if ! host -t SOA "${revzone}.in-addr.arpa" 2>/dev/null | grep -q 'has SOA' ; then
			echo "Info: Adding reverse dns zone ${revzone}.in-addr.arpa."
			echo samba-tool dns zonecreate "${HOST}.${domain}" "${revzone}.in-addr.arpa" -P
			samba-tool dns zonecreate "${HOST}.${domain}" "${revzone}.in-addr.arpa" -P 2>&1
		else
			echo "Info: Reverse zone ${revzone}.in-addr.arpa exists."
		fi

		# Create a reverse pointer record for this server, if none exists.
		if ! host -t PTR "${HOST_IP}" >/dev/null 2>&1 ; then
			echo "Info: Adding reverse pointer record for ${node} in ${revzone}.in-addr.arpa type PTR ${HOST}.${domain}"
			                echo samba-tool dns add   -U administrator  "${HOST_IP}"  "${revzone}.in-addr.arpa"  "${node}"  PTR  "${HOST}.${domain}"
			echo "${PASSWORD}" | samba-tool dns add   -U administrator  "${HOST_IP}"  "${revzone}.in-addr.arpa"  "${node}"  PTR  "${HOST}.${domain}"
			echo "${PASSWORD}" | samba-tool dns query -U administrator  "${HOST_IP}"  "${revzone}.in-addr.arpa"  "${node}"  PTR
		else
			echo "Info: Reverse pointer for ${HOST_IP} exists."
		fi
	fi

	# Executed after the controller has been provisioned and started on the first run.

	if [ "${mode}" = "provision" ]; then

		# Turn-off password expiration for Administrator.
		echo "samba-tool user setexpiry Administrator --noexpiry"
		samba-tool user setexpiry Administrator --noexpiry

		# Turn-off password complexity.
		echo "samba-tool domain passwordsettings set --complexity=off"
		samba-tool domain passwordsettings set --complexity=off

		# Remove password expiration.
		echo "samba-tool domain passwordsettings set --min-pwd-age=0"
		samba-tool domain passwordsettings set --min-pwd-age=0
		echo "samba-tool domain passwordsettings set --max-pwd-age=0"
		samba-tool domain passwordsettings set --max-pwd-age=0
		echo "pdbedit -P "maximum password age" -C -1"
		pdbedit -P "maximum password age" -C -1

		# Allow password reuse.
		echo "samba-tool domain passwordsettings set --history-length=0"
		samba-tool domain passwordsettings set --history-length=0
		# Note: this is only relevant if using the ISC DHCP server with dynamic updates.
		# Create an unprivileged user for dhcp updates with a random password.
		samba-tool user create dhcpduser --description="Unprivileged user for TSIG-GSSAPI DNS updates via ISC DHCP server" --random-password

		# Set the the dhcp users password to never expire and add it to the DnsAdmins group.
		samba-tool user setexpiry dhcpduser --noexpiry
		samba-tool group addmembers DnsAdmins dhcpduser
	fi

	echo samba-tool domain exportkeytab --principal="dhcpduser@${realm}" "${private_dir}/dhcpduser.keytab"
	if samba-tool domain exportkeytab --principal="dhcpduser@${realm}" "${private_dir}/dhcpduser.keytab" ; then
		# Note: If there is no dhcpduser defined, no error is returned and no keytab file is created.
		if [ -e "${private_dir}/dhcpduser.keytab" ]; then
			# Change permissions on the dhcpduser keytab.
			chmod 400 "${private_dir}/dhcpduser.keytab"
			# Copy this to /etc where the dhcp-dyndns.sh script expects it.
			cp -a "${private_dir}/dhcpduser.keytab" /etc/dhcpduser.keytab
		else
			echo "Warning: exportkeytab for dhcpduser failed, continuing anyway!"
		fi
	else
		echo "Warning: exportkeytab for dhcpduser failed, continuing anyway!"
	fi
}

# Set the local and global variables.

# If the fully qualified domain name has not been set, use the system hostname.
[ -z "${FQDN}" ] && FQDN="$(cat /proc/sys/kernel/hostname)"
# Get the host, realm and domain from the FQDN.
HOST="$(echo "${FQDN}" | cut -d . -f 1)"
realm="$(echo "${FQDN#*.}" | tr '[:lower:]' '[:upper:]')"
domain="$(echo "${realm}" | tr '[:upper:]' '[:lower:]')"
[ -z "${WORKGROUP}" ] && WORKGROUP="$(echo "${realm}" | cut -d . -f 1)"
# If the interface has not been set, pick the first interface that is not the loopback.
[ -z "${INTERFACE}" ] && INTERFACE="$(ip a | grep '^[0-9][0-9]*:' | grep -v ' lo:' | awk '{print $2}' | cut -d : -f1 | head -1 | cut -d @ -f1)"
# Get the IPv4 address for the interface.
HOST_IP="$(ip a show "${INTERFACE}" | grep 'inet ' | awk '{print $2}' | cut -d / -f1)"
# Set the password and mode.
[ -z "${PASSWORD}" ] && [ -e ./password.txt ] && PASSWORD="$(head -1 ./password.txt)"
[ -z "${PASSWORD}" ] && PASSWORD="Passw0rd"
mode="${1}"

[ -z "${1}" ] && err="true"
[ "${1}" = "join" ] && [ -z "${2}" ] && err="true"

if [ -n "${err}" ]; then
	cat <<-__EOD__
	Format: $(basename "${0}") provision | join <primary_host>

	The host is:         ${HOST}
	The domain is:       ${domain}
	The realm is:        ${realm}
	The workgroup is:    ${WORKGROUP}
	The interface is:    ${INTERFACE}
	The IPv4 address is: ${HOST_IP}

	Note: The default password is Passw0rd.  If a file named password.txt
	      is found, the first line will be used as the password.
	__EOD__
	
	exit 1
fi

if [ 0 != "$(id -u)" ]; then
	echo "Must be root!"
	exit 1
fi

# Ensure the hostname is valid.

if [ "${HOST}" = "${FQDN}" ]; then
	echo "Error: The short hostname must not equal the fully qualified hostname."
	exit 1
fi

# Verify that samba is installed.

if ! command -v samba-tool >/dev/null 2>&1 ; then
	echo "Error: Samba is not installed."
	exit 1
fi

# Ensure that samba has not already been provisioned.

private_dir="$(smbd -b | grep -i PRIVATE_DIR | awk '{print $2}')"
if [ -e "${private_dir}/krb5.conf" ]; then
	echo "Error: Samba has already been configured on this server."
	exit 1
fi

# If this is the backup controller, wait for start signal, then configure the resolver.

if [ "${FQDN}" = "backup.test.example.com" ]; then
	# Make sure the test container has time to erase any previous start file.
	sleep 3s
	wait_for_file "/sut/${HOST}.start"
	# Get the primary controller's IP value from the start file.
	primary="$(cat "/sut/${HOST}.start" || :)"
	rm -f "/sut/${HOST}.start"
	echo "Info: Primary Domain Controller IP is ${primary}"
	# Set the dns name server to the primary.
	echo "search ${domain}"       >/etc/resolv.conf
	echo "nameserver ${primary}" >>/etc/resolv.conf
fi

# If the systemd-resolved service is running, disable the stub listener.
# See: https://askubuntu.com/questions/1104863/samba-internal-dns-systemd-resolve-safe-to-disable

if systemctl is-active systemd-resolved >/dev/null 2>&1 ; then
	if ! grep -q "DNSStubListener.*=.*no$" /etc/systemd/resolved.conf 2>/dev/null ; then
		echo "Info: Adding DNSStubListener=no to: /etc/systemd/resolved.conf."
		# Add a [resolve] section to the config file if it does not exist.
		grep -q "\[Resolve\]" /etc/systemd/resolved.conf 2>/dev/null || echo "[Resolve]" >>/etc/systemd/resolved.conf
		echo "DNSStubListener=no" >>/etc/systemd/resolved.conf
		systemctl restart systemd-resolved
	else
		echo "Info: DNSStubListener is already set to no."
	fi
	
	if [ "${mode}" = "join" ]; then
		echo "Info: Adding temporary DNS record to systemd-resolved configuration."
		echo resolvectl dns "${INTERFACE}" "${2}"
		resolvectl dns "${INTERFACE}" "${2}"
	fi
fi

# If joining, make sure that the server can be contacted.
if [ "${mode}" = "join" ]; then
	if ! host "${domain}" >/dev/null 2>&1 ; then
		echo "Error: Unable to query the current DNS server for ${domain} records."
		echo
		echo "Are the DNS settings correct?"
		exit 1
	fi
fi

# Append a hosts record as recommended by the samba developers, if needed.
if ! grep -q "${FQDN}" /etc/hosts ; then
	# Get the IP address for this server.
	echo "Info: Appending '${HOST_IP} ${FQDN} ${HOST}' to /etc/hosts"
	echo "${HOST_IP} ${FQDN} ${HOST}" >>/etc/hosts
fi

# Save the original config file.

[ -e /etc/samba/smb.conf ] && mv /etc/samba/smb.conf /etc/samba/smb.conf.orig

# Deleted --use-rfc2307 should not be used on AD DC's.
# See: https://wiki.samba.org/index.php/Setting_up_RFC2307_in_AD
# It is not recommended to use RFC2307 mappings on Samba AD DC's. The default idmap.ldb mechanism is fine for domain controllers and less error prone.

case ${mode} in
provision)
	echo "Info: Provisioning ${realm} with Samba $(samba -V)"
	echo

	samba-tool domain provision \
	  --realm="${realm}" \
	  --domain="${WORKGROUP}" \
	  --server-role=dc \
	  --dns-backend=SAMBA_INTERNAL \
	  --adminpass="${PASSWORD}"
	;;
join)
	echo "Info: Joining ${realm} with Samba $(samba -V)"
	echo

	samba-tool domain join "${realm}" DC \
	  --dns-backend=SAMBA_INTERNAL \
	  -UAdministrator --password="${PASSWORD}"
	;;
*) 
	echo "Error: Mode must be provision or join."
	exit 1
	;;
esac

# Save the generated config file.
cp /etc/samba/smb.conf /etc/samba/smb.conf.generated

# Enable TLS.  TODO The samba default tls keys are only good for two years!
tls="t tls enabled  = yes"
tls="${tls}\nt tls keyfile  = tls/key.pem"
tls="${tls}\nt tls certfile = tls/cert.pem"
tls="${tls}\nt tls cafile   = tls/ca.pem"
tls="${tls}\nt tls priority = NORMAL:-VERS-TLS1.0:-VERS-TLS1.1:-VERS-TLS1.2"
sed "/workgroup = /a ${tls}" /etc/samba/smb.conf \
  | sed  's/^t /        /g' >/tmp/smb.conf
mv -f /tmp/smb.conf /etc/samba/smb.conf

# Ensure forwarder in config.  This is not done automatically on a join.

if ! grep -q "dns forwarder" /etc/samba/smb.conf ; then
	echo "Info: Adding dns forwarder option to smb.conf."
	dns="$(ip r | grep ^default | awk '{ print $3 }')"
	sed -i "/\[global\]/a dns forwarder = ${dns}"   /etc/samba/smb.conf
	sed -i 's/^dns forwarder/	dns forwarder/' /etc/samba/smb.conf
fi

echo "Info: Copying the kerberos configuration generated by Samba."
[ -e /etc/krb5.conf ] && mv /etc/krb5.conf /etc/krb5.conf.orig
cp -f "${private_dir}/krb5.conf" /etc/

echo "Info: Setting dns to self (${HOST_IP}) and dns search to this domain (${domain})."
if command -v nmcli >/dev/null 2>&1 ; then
	echo "Info: Updating nameserver with nmcli."
	conn="$(nmcli -t -f NAME c show --active | grep -v '^lo' | head -1)"
	nmcli con mod "${conn}" ipv4.dns        "${HOST_IP}"
	nmcli con mod "${conn}" ipv4.dns-search "${domain}"
	nmcli con mod "${conn}" ipv4.ignore-auto-dns yes
	nmcli con up  "${conn}"
else
	if systemctl is-active systemd-resolved >/dev/null 2>&1 ; then
		echo "Info: Updating nameserver with resolvectl."
		resolvectl dns     "${INTERFACE}" "${HOST_IP}"
		resolvectl domain  "${INTERFACE}" "${domain}"
	else
		echo "Info: Updating nameserver in /etc/resolv.conf."
		echo "search ${domain}"      >/etc/resolv.conf
		echo "namesever ${HOST_IP}" >>/etc/resolv.conf
	fi
fi

samba_service="samba"
[ -e /usr/bin/apt-get ] && samba_service="samba-ad-dc"
if systemctl is-active systemd-journald >/dev/null 2>&1 ; then
	if [ ! -e /usr/bin/apt-get ]; then
		echo "Info: Enabling Samba."
		systemctl enable ${samba_service}
	else
		echo "Info: Samba should already be enabled for Debian-like distros."
	fi
fi

# If Firewalld is running, allow related ports.

echo
if systemctl is-active firewalld >/dev/null 2>&1 ; then
	echo "Info: Adding services {dns,kerberos,kpasswd,ldap,ldaps,samba} to firewall."
	# shellcheck disable=SC3009
	firewall-cmd --add-service={dns,kerberos,kpasswd,ldap,ldaps,samba}
	echo "Info: Adding ports {135/tcp,137-138/udp,139/tcp,3268-3269/tcp,49152-65535/tcp} to firewall."
	# shellcheck disable=SC3009
	firewall-cmd --add-port={135/tcp,137-138/udp,139/tcp,3268-3269/tcp,49152-65535/tcp}
	echo "Info: Making firewall changes permanent."
	firewall-cmd --runtime-to-permanent
else
	echo "Info: Firewall daemon is not running, no changes needed!"
fi

echo
samba-tool domain level show

if ! systemctl is-active systemd-journald >/dev/null 2>&1 ; then
	# Not running under systemd so just start samba!
	samba
else
	systemctl start ${samba_service}
fi

post_provisioning "${mode}" "${primary}"

if samba-tool dbcheck --cross-ncs ; then
	echo "Info: Samba dbcheck completed successfully!"
else
	echo "Warning: Samba dbcheck failed!"
fi

# If this is a test run, set the status to running and wait for the shutdown signal.
if [ -d /sut ]; then
	# Add authorized key for testing dynamic dns updates.
	mkdir -p /root/.ssh
	echo 'command="/usr/local/bin/samba-dyndns-wrapper" ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIC2BkIqATjbZHBQbUGwDdqXI3JaAk/ZcON7bkp2XQrRn dns-updates' >>/root/.ssh/authorized_keys
	if ! systemctl is-active systemd-journald >/dev/null 2>&1 ; then
		[ -e /usr/libexec/openssh/sshd-keygen ] && /usr/libexec/openssh/sshd-keygen ed25519
		mkdir -p /run/sshd
		/usr/sbin/sshd || echo "Warning: Error starting SSH daemon."
	else
		systemctl start sshd || echo "Warning: Error starting SSH daemon."
	fi
	echo >"/sut/${HOST}.running"
	wait_for_file "/sut/${HOST}.shutdown"
	systemctl is-active systemd-journald >/dev/null 2>&1 && kill -s "RTMIN+3" 1
fi

echo "Done!"

exit 0


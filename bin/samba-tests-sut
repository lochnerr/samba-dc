#!/bin/sh

# samba-tests-sut: System Unit Tests for automated Docker build.

wait_for_file() {

	for try in $(seq 90) ; do
		[ -e "${1}" ] && break
		sleep 10s
	done
}

lookup_test() {

	test="Lookup $1 record for $2"
	[ "$3" = "fail" ] && test="Delete of $1 record for $2"
	if host -t "$1" "$2" >/dev/null 2>&1 ; then
		[ "$3" = "pass" ] && log_pass "$test"
		[ "$3" = "fail" ] && log_fail "$test"
		rc="0"
	else
		[ "$3" = "pass" ] && log_fail "$test"
		[ "$3" = "fail" ] && log_pass "$test"
		rc="1"
	fi
}

run_tests() {

  HOST_NAME="$1"
  HOST_IP="$2"

  echo "Running tests for $HOST_NAME at address ${HOST_IP}."

  # Update the resolv.conf file to point to the controller to be tested.
  cat > /etc/resolv.conf <<-__EOF__
	search $DOMAIN
	nameserver ${HOST_IP}
	__EOF__

  test_samba

  mkdir -p ~/.ssh
  cat >~/.ssh/id_ed25519 <<-__EOD__
	-----BEGIN OPENSSH PRIVATE KEY-----
	b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
	QyNTUxOQAAACAtgZCKgE422RwUG1BsA3alyNyWgJP2XDje25Kdl0K0ZwAAAJiZ2Ktdmdir
	XQAAAAtzc2gtZWQyNTUxOQAAACAtgZCKgE422RwUG1BsA3alyNyWgJP2XDje25Kdl0K0Zw
	AAAEBHe9Ja34lhnan1fbEoYuPqZ8qpx9iY3t85dFVzKmNrvi2BkIqATjbZHBQbUGwDdqXI
	3JaAk/ZcON7bkp2XQrRnAAAAE2R5bmFtaWNAZG5zLnVwZGF0ZXMBAg==
	-----END OPENSSH PRIVATE KEY-----
	__EOD__
  chmod 400 ~/.ssh/id_ed25519

  # Generate a dummy address in this network segment to add to dns.
  ip="$(echo "${HOST_IP}" | cut -d. -f1-3).250"
  ptr="$(echo "${ip}" | awk -F '.' '{print $4 "." $3 "." $2 "." $1 ".in-addr.arpa"}')"

  # Test the dhcp-dyndns.sh add functionality.
  echo ssh -o StrictHostKeyChecking=no root@"${HOST_IP}" samba-dyndns-wrapper "add" "$ip" "nil" "nstest"
  ssh -o StrictHostKeyChecking=no root@"${HOST_IP}" samba-dyndns-wrapper "add" "$ip" "nil" "nstest" || rc="$?"
  [ "${rc:-0}" != "0" ] && echo "ssh rc is $rc"
  lookup_test A   "$ip"   pass
  test_a="$rc"
  lookup_test PTR "$ptr"  pass
  test_ptr="$rc"

  # Test the dhcp-dyndns.sh delete functionality.
  echo ssh -o StrictHostKeyChecking=no root@"${HOST_IP}" samba-dyndns-wrapper "delete" "$ip" "nil"
  ssh -o StrictHostKeyChecking=no root@"${HOST_IP}" samba-dyndns-wrapper "delete" "$ip" "nil" || rc="$?"
  [ "${rc:-0}" != "0" ] && echo "ssh rc is $rc"
  if [ "$test_a"   = "0" ]; then
	lookup_test A   "$ip"   fail
  fi
  if [ "$test_ptr" = "0" ]; then
	lookup_test PTR "$ptr"  fail
  fi
}

echo "Starting system unit tests!"
echo
echo "Samba $(samba -V)"
echo

# Make sure there aren't any leftover signal files.
rm -f /sut/backup.start
rm -f /sut/primary.running
rm -f /sut/backup.running
rm -f /sut/primary.shutdown
rm -f /sut/backup.shutdown

# Give podman/docker time to set the IP addresses.
sleep 1s

# Get the primary and backup IP's from podman/docker's internal dns.
PRIMARY_IP="$(host -t A primary.test.example.com | grep 'has address' | cut -d ' ' -f 4)"
BACKUP_IP="$(host -t A backup.test.example.com | grep 'has address' | cut -d ' ' -f 4)"

echo "Primary has address: $PRIMARY_IP"
echo "Backup has address:  $BACKUP_IP"

# Ping does not work inside container on Debian without adding this capability.
[ -x /usr/bin/apt-get ] && setcap cap_net_raw+p /usr/bin/ping
ping -w 3 "$PRIMARY_IP" >/dev/null && echo "Primary PING successful."
ping -w 3 "$BACKUP_IP" >/dev/null && echo "Backup PING successful."

# Set the global vars.
# shellcheck source=bin/samba-set-vars
. samba-set-vars
set_samba_vars

# Create a config file for the test container.
if [ -L /etc/samba ]; then
  echo "Removing /etc/samba symbolic link."
  rm -f /etc/samba
  mkdir /etc/samba
fi
cat >/etc/samba/smb.conf <<-__EOF__
	security = ADS
	workgroup = ${WORKGROUP}
	realm = ${REALM}

	log file = /var/log/samba/%m.log
	log level = 1

	idmap config * : backend = tdb
	idmap config * : range = 3000-7999

	idmap config ${WORKGROUP}:backend = ad
	idmap config ${WORKGROUP}:schema_mode = rfc2307
	idmap config ${WORKGROUP}:range = 10000-999999
	idmap config ${WORKGROUP}:unix_nss_info = yes

	vfs objects = acl_xattr
	map acl inherit = yes
	store dos attributes = yes
	__EOF__

# Update the kerberos config.
cat >/etc/krb5.conf <<-__EOF__
	[libdefaults]
	     default_realm = $REALM
	     dns_lookup_realm = false
	     dns_lookup_kdc = true
	__EOF__

# Source the test functions.
# shellcheck source=bin/samba-tests
. samba-tests

# Test the primary.
wait_for_file /sut/primary.running
run_tests primary "$PRIMARY_IP"

# Test the backup.
echo "$PRIMARY_IP" >/sut/backup.start
wait_for_file /sut/backup.running
run_tests backup "$BACKUP_IP"

# Show the test statistics.
test_stats

# Send shutdown signals to the controllers.
echo >/sut/primary.shutdown
echo >/sut/backup.shutdown

# Give services some time to finish shutting down.
sleep 5s

rc="0"
if [ "$errs" != "0" ]; then
  echo "Error: Manditory tests failed."
  rc="1"
fi

echo "SUT tests completed!"

echo "Exiting!"

exit $rc


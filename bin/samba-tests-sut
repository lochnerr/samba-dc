#!/bin/sh

# samba-tests-sut: System Unit Tests for automated Docker build.

wait_for_state() {

  HOST="$1"
  expected="$2"
  expected2="invalid"
  [ -n "$3" ] && expected2="$3"

  # Wait up to 5 minutes for server to reach desired state.
  rc="2"
  for try in $(seq -s ' ' 1 30) ; do
    result="$(echo "status" | socat -T3 STDIO UDP4-SENDTO:$HOST:5555 2>/dev/null || true)"
    state=""
    [ "$result" = "$expected"  ] && state="$expected"
    [ "$result" = "$expected2" ] && state="$expected2"
    if [ -n "$state" ]; then
      echo "$HOST is $state!"
      rc="0"
      break
    fi
    sleep 3s
    echo "Waiting for $HOST to be ${expected}."
  done
  [ "$rc" != "0" ] && echo "$HOST did not reach the $expected state!"
}

run_tests() {

  HOST_NAME="$1"
  HOST_IP="$2"

  echo "Running tests for $HOST_NAME at address ${HOST_IP}."

  # Update the resolv.conf file to point to the master or slave.
  cat > /etc/resolv.conf <<-__EOF__
	search $DOMAIN
	nameserver ${HOST_IP}
	__EOF__

  test_samba
}

echo "Starting system unit tests!"

# Wait for the servers to be in the starting or running state.
wait_for_state test-master Starting Running
wait_for_state test-slave  Starting Running

# Get the master and slave IP's from docker's internal dns.
MASTER_IP="$(host -t A test-master | grep 'has address' | cut -d ' ' -f 4)"
SLAVE_IP="$(host -t A test-slave | grep 'has address' | cut -d ' ' -f 4)"

echo "Master has address: $MASTER_IP"
echo "Slave has address:  $SLAVE_IP"

# Set the global vars.
. samba-set-vars
set_samba_vars

# Create a config file for the test container.
if [ -L /etc/samba ]; then
  echo "Removing /etc/samba symbolic link."
  rm -f /etc/samba
  mkdir /etc/samba
fi
cat >/etc/samba/smb.conf <<-__EOF__
	security = ADS
	workgroup = ${WORKGROUP}
	realm = ${REALM}

	log file = /var/log/samba/%m.log
	log level = 1

	idmap config * : backend = tdb
	idmap config * : range = 3000-7999

	idmap config ${WORKGROUP}:backend = ad
	idmap config ${WORKGROUP}:schema_mode = rfc2307
	idmap config ${WORKGROUP}:range = 10000-999999
	idmap config ${WORKGROUP}:unix_nss_info = yes

	vfs objects = acl_xattr
	map acl inherit = yes
	store dos attributes = yes
	__EOF__

# Update the kerberos config.
cat >/etc/krb5.conf <<-__EOF__
	[libdefaults]
	     default_realm = $REALM
	     dns_lookup_realm = false
	     dns_lookup_kdc = true
	__EOF__

# Source the test functions.
. samba-tests

# Test the master.
wait_for_state $MASTER_IP Running
run_tests test-master $MASTER_IP

# Test the slave.
wait_for_state $SLAVE_IP Running
run_tests test-slave $SLAVE_IP

# Show the test statistics.
test_stats

# Signal shutdown for master and slave.
result="$(echo "shutdown" | socat -T2 STDIO UDP4-SENDTO:$MASTER_IP:5555 2>/dev/null || true)"
result="$(echo "shutdown" | socat -T2 STDIO UDP4-SENDTO:$SLAVE_IP:5555  2>/dev/null || true)"

# Give services some time to finish shutting down.
sleep 5s

rc="0"
if [ "$errs" != "0" ]; then
  echo "Error: Manditory tests failed."
  rc="1"
fi

echo "SUT tests completed!"

echo "Exiting!"

exit $rc


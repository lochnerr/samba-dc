#!/bin/sh

# samba-tests-sut: System Unit Tests for automated Docker build.

run_tests() {

  HOST_NAME="$1"
  HOST_IP="$2"

  echo "Running tests for $HOST_NAME at address ${HOST_IP}."

  # Update the resolv.conf file to point to the master or slave.
  cat > /etc/resolv.conf <<-__EOF__
	search $DOMAIN
	nameserver ${HOST_IP}
	__EOF__

  dir="samba"
  [ "$HOST_NAME" = "test-slave" ] && dir="slave"

  # Wait up to 5 minutes for server to come up.
  for try in $(seq -s ' ' 1 30) ; do
    status="$(cat /var/lib/$dir/samba-status 2>/dev/null || true)"
    if [ "$status" = "Running" ]; then
      echo "$HOST_NAME is up!"
      rc="0"
      test_samba
      [ "$errs" != "0" ] && rc="2"
      break
    fi
    sleep 10;
    echo "Waiting for ${HOST_NAME} to become ready ($try)."
    rc="1"
  done
  if [ "$rc" != "0" ]; then
    echo "**************************** $HOST_NAME startup log start."
    cat /var/lib/$dir/samba-startup.log
    echo "**************************** $HOST_NAME startup log end."
    log_fail "Waiting for test host to come up"
  fi
  test_stats
}

wait_for_starting() {

  dir="samba"
  [ "$1" = "test-slave" ] && dir="slave"

  # Wait up to 1 minute for server to begin starting.
  for try in $(seq -s ' ' 1 4) ; do
    status="$(cat /var/lib/$dir/samba-status 2>/dev/null || true)"
    if [ "$status" = "Starting" ]; then
      echo "$1 is starting!"
      break
    fi
    sleep 15;
  done
}

wait_for_starting test-master
wait_for_starting test-slave

# Get the master and slave IP's from docker's internal dns.
MASTER_IP="$(host -t A test-master | grep 'has address' | cut -d ' ' -f 4)"
SLAVE_IP="$(host -t A test-slave | grep 'has address' | cut -d ' ' -f 4)"

echo "Master has address: $MASTER_IP"
echo "Slave has address:  $SLAVE_IP"

# Set the global vars.
. samba-set-vars
set_samba_vars

# Update the kerberos config.
cat >/etc/krb5.conf <<-__EOF__
	[libdefaults]
	     default_realm = $REALM
	     dns_lookup_realm = false
	     dns_lookup_kdc = true
	__EOF__

# Source the test functions.
. samba-tests

# Test the master.
run_tests test-master $MASTER_IP

# Test the slave.
run_tests test-slave $SLAVE_IP

# Signal shutdown for master and slave.
/bin/echo "shutdown" >/var/lib/samba/cmd
/bin/echo "shutdown" >/var/lib/slave/cmd

# It can take up to 15 seconds for services to shut down.
sleep 15s

rc="0"
if [ "$errs" != "0" ]; then
  echo "Error: Manditory tests failed."
  rc="1"
fi

echo "SUT tests completed!"

echo "Exiting!"

exit $rc


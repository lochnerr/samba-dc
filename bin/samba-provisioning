#!/bin/sh

# samba-provisioning: Samba provisioning and post-provisioning functions.  Only used on first run.

create_samba_config() {

  local cfg="/etc/samba/smb.conf"

cat >$cfg <<__EOF__

# Global parameters
[global]
	bind interfaces only = $BIND_INTERFACES_ONLY
	dns forwarder = $DNS_FORWARDERS
	interfaces = $INTERFACES
	netbios name = $(echo $HOST_NAME | tr [a-z] [A-Z])
	realm = $REALM
	server role = active directory domain controller
	server services = s3fs, rpc, nbt, wrepl, ldap, cldap, kdc, drepl, winbindd, ntp_signd, kcc, dnsupdate
	workgroup = $WORKGROUP
	idmap_ldb:use rfc2307 = yes

	# Settings that are not samba-tool defaults

	log level = $LOG_LEVEL

	tls enabled  = yes
	tls cafile   = tls/ca.pem
	tls keyfile  = tls/key.pem
	tls certfile = tls/cert.pem
	tls verify peer = ca_and_name

	allow dns updates = nonsecure

	add machine script = /usr/sbin/adduser -D -H -G users -s /bin/false %u

	#? ldap server require strong auth = no
	#? client ldap sasl wrapping = plain

	#template shell = /bin/bash
	#winbind refresh tickets = Yes
	#winbind use default domain = $WINBIND_USE_DEFAULT_DOMAIN
	#winbind offline logon = false
	#winbind nss info = rfc2307

	#winbind enum users = yes
	#winbind enum groups = yes

	#domain logons = $DOMAIN_LOGONS
	#domain master = $DOMAIN_MASTER

	# Stop the syslog being spammed by the lack of a CUPS server.
	printing = CUPS
	printcap name = /dev/null

[netlogon]
	path = $STATEDIR/sysvol/$DOMAIN/scripts
	read only = No

[sysvol]
	path = $STATEDIR/sysvol
	read only = No

__EOF__

}

provision() {

  # Create a persistent config directory (first run only).
  echo "Creating persistent config directory in ${STATEDIR}."
  mkdir -p ${STATEDIR}/config
  cp -a /etc/samba-bak/. ${STATEDIR}/config

  # Remove default config files.
  rm -f /etc/samba/smb.conf /etc/krb5.conf

  # Provision (master) or join (slave).
  USE_RFC2307=${USE_RFC2307:-yes}
  if [ "$ROLE" = "master" ]; then

    # Provision domain.

    [ "${USE_RFC2307}" = "yes" ] && rfc2307="--use-rfc2307"

    echo "Provisioning domain '$DOMAIN'."

    #  --host-name=$HOST_NAME \
    samba-tool domain provision \
      --server-role=dc \
      --realm=$REALM \
      --domain=$WORKGROUP \
      --adminpass=$PASSWORD \
      --dns-backend=$BACKEND \
      --option="bind interfaces only=${BIND_INTERFACES_ONLY:-no}" \
      --option="interfaces=${INTERFACES:-lo eth0}" \
      ${rfc2307}

    # Record the provisioned backend.
    echo "$BACKEND" >$STATEDIR/backend

  else

    # Join Domain.

    # The /var/lib/master directory should only be mounted when running system unit tests.
    if [ -d /var/lib/master ]; then
      # Wait for master to come up.
      for try in $(seq -s ' ' 1 15) ; do
        status="$(cat /var/lib/master/samba-status 2>/dev/null || true)"
        if [ "$status" = "Running" ]; then
          echo "Master host $MASTER_IP is up!"
          break
        fi
        sleep 10;
        echo "Waiting for host $MASTER_IP to become ready ($try)."
      done
    fi

    # Create a temporary /etc/resolv.conf that points to the master for joining.
    cat > /etc/resolv.conf <<-__EOF__
	search $DOMAIN
	nameserver $MASTER_IP
	__EOF__

    # Create a krb5.conf for joining.
    cat > /etc/krb5.conf <<-__EOF__
	[libdefaults]
	        default_realm = $REALM
	        dns_lookup_realm = false
	        dns_lookup_kdc = true
	__EOF__

    # Copy the idmap from the master.  This will be needed once the join is complete.
    mast="$(host $MASTER_IP $MASTER_IP | grep 'name pointer' | sed 's/^.*pointer //' | cut -d '.' -f 1)"
    echo "Mounting sysvol //${mast}.$DOMAIN/sysvol."
    if mount -t cifs -o user=Administrator,pass=$PASSWORD //${mast}.$DOMAIN/sysvol /mnt 2>/dev/null ; then
      if [ ! -e /mnt/provision/idmap.ldb.bak ]; then
        echo "Warning: Unable to restore idmap.ldb from master sysvol, continuing anyway!"
      else
        echo "//${mast}.$DOMAIN/sysvol mounted successfully."
        cp -a /mnt/provision/idmap.ldb.bak /tmp
      fi
      umount /mnt
    else
      echo "Warning: Failed to mount //$DOMAIN/sysvol, continuing anyway!"
    fi

    # Get a kerberos ticket.  This *IS* necessary for a successful join.
    echo "$PASSWORD" | if ! kinit Administrator ; then
      echo "Cannot authenticate to master domain controller."
      exit 1
    fi

    echo "Joining domain '$DOMAIN'."

    if [ "$BACKEND" = "BIND9_DLZ" ]; then
      # Domain join with BIND9_DLZ incorrectly creates the dns account.
      # See: https://bugzilla.samba.org/show_bug.cgi?id=13926
      echo "Forcing domain join to use SAMBA_INTERNAL backend."
      echo "Backend will be upgraded to BIND9_DLZ after the join."
    fi

    samba-tool domain join $REALM DC \
      -UAdministrator --password=$PASSWORD \
      --dns-backend=SAMBA_INTERNAL \
      --option="bind interfaces only=${BIND_INTERFACES_ONLY:-no}" \
      --option="interfaces=${INTERFACES:-lo eth0}" \
      --option="idmap_ldb:use rfc2307 = ${USE_RFC2307}"

    # Record the provisioned backend.
    echo "SAMBA_INTERNAL" >$STATEDIR/backend
  fi

  # If not master, copy the idmap saved above.
  if [ -e /tmp/idmap.ldb.bak ]; then
    echo "Synchronizing idmap with master."
    cp -a /tmp/idmap.ldb.bak $PRIVATE_DIR/idmap.ldb
  fi

  # Backup the samba-tool generated smb.conf file.
  mv /etc/samba/smb.conf /etc/samba/smb.conf.bak

  # Create default samba config.
  create_samba_config

  # Create a docker persistent hosts file.
  cat > /etc/hosts <<-__EOF__
	127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
	::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
	$HOST_IP    ${HOST_NAME}.$DOMAIN ${HOST_NAME}
	__EOF__
  cp -a /etc/hosts $PRIVATE_DIR/

  # Create a docker persistent resolv.conf file.
  cat > /etc/resolv.conf <<-__EOF__
	search $DOMAIN
	nameserver ${HOST_IP}
	__EOF__
  cp -a /etc/resolv.conf $PRIVATE_DIR/
}

dns_add() {

  server="$1"; zone="$2"; key="$3"; val="$5"; type="$4"

  if ! samba-tool dns add $server  $zone  $key  $type  $val -P 2>&1 ; then
    echo "DNS add of $val for $key type $type in $zone failed, continuing anyway."
  fi
}

post_provisioning() {

  # Step 6 (Out of order from docs): Create a reverse zone

  # Create a reverse zone for this server, if needed.
  subnet="$(ip addr | grep ${HOST_IP} | cut -d '/' -f2 | cut -d ' ' -f1)"
  echo "$HOST_IP is in a /$subnet subnet."
  revzone="$(echo ${HOST_IP} | awk -F '.' '{print $3 "." $2 "." $1}')"
  node="$(echo ${HOST_IP} | awk -F '.' '{print $4}')"
  if [ -z "$(host -t SOA ${revzone}.in-addr.arpa 2>/dev/null | grep -i 'has SOA')" ]; then
    echo "Adding reverse dns zone ${revzone}.in-addr.arpa."
    samba-tool dns zonecreate ${HOST_NAME}.$DOMAIN ${revzone}.in-addr.arpa -P 2>&1
  else
    echo "Reverse zone ${revzone}.in-addr.arpa exists."
  fi

  # Step 9: Other useful configuration not specified in docs.

  # Add IPv4 dns record for this host, if none exists.
  if [ -z "$(host -t A $HOST_NAME | grep -i 'has address')" ]; then
    echo "Adding dns record for $HOST_NAME in $DOMAIN type A ${HOST_IP}"  
    dns_add $MASTER_IP  $DOMAIN  $HOST_NAME  A  $HOST_IP
  else
    echo "IPv4 dns record for $HOST_NAME exists."
  fi

  # Add IPv6 dns record for this host, if none exists.
  if [ -z "$(host -t AAAA $HOST_NAME | grep -i 'has IPv6 address')" ]; then
    HOST_IP6="$(ip addr | grep inet6 | grep global | awk '{print $2}' | cut -d '/' -f1)"
    if [ -n "$HOST_IP6" ]; then
      echo "Adding dns record for $HOST_NAME in $DOMAIN type AAAA ${HOST_IP6}"
      dns_add $MASTER_IP  $DOMAIN  $HOST_NAME  AAAA  $HOST_IP6
    else
      echo "Not adding IPv6 dns record: No IPv6 address detected."
    fi
  else
    echo "IPv6 dns record for $HOST_NAME exists."
  fi

  # Create a reverse pointer record for this server, if none exists.
  if ! host -t PTR $HOST_IP >/dev/null 2>&1 ; then
    echo "Adding reverse pointer record for $node in ${revzone}.in-addr.arpa type PTR ${HOST_NAME}.$DOMAIN"
    dns_add $MASTER_IP ${revzone}.in-addr.arpa $node PTR ${HOST_NAME}.$DOMAIN
  else
    echo "Reverse pointer for $HOST_IP exists."
  fi

  # TODO Figure out how to do this correctly for IPv6 network.
  # Adding a IPv6 record looks like: samba-tool dns add <server>     <zone>                                   <name>                          <type> <data>
  # Adding a IPv6 record looks like: samba-tool dns add 192.168.33.6 d.0.2.a.4.3.e.7.0.8.3.0.0.0.6.2.ip6.arpa b.f.4.b.f.f.1.c.5.8.5.6.b.a.5.0 PTR    dc1.ad.clone1.com
  ##echo "samba-tool dns zonecreate ${HOST_NAME}.$DOMAIN d.0.2.a.4.3.e.7.0.8.3.0.0.0.6.2.ip6.arpa -U Administrator --password=****"
  ##samba-tool dns zonecreate ${HOST_NAME}.$DOMAIN d.0.2.a.4.3.e.7.0.8.3.0.0.0.6.2.ip6.arpa -U Administrator --password=$PASSWORD 2>&1

  # Executed after the controller has been provisioned and started on the first run.

  if [ "$ROLE" = "master" ]; then

    # Turn-off password expiration for Administrator.
    echo "samba-tool user setexpiry Administrator --noexpiry"
    samba-tool user setexpiry Administrator --noexpiry

    # Turn-off password complexity.
    echo "samba-tool domain passwordsettings set --complexity=off"
    samba-tool domain passwordsettings set --complexity=off

    # Remove password expiration.
    echo "samba-tool domain passwordsettings set --min-pwd-age=0"
    samba-tool domain passwordsettings set --min-pwd-age=0
    echo "samba-tool domain passwordsettings set --max-pwd-age=0"
    samba-tool domain passwordsettings set --max-pwd-age=0
    echo "pdbedit -P "maximum password age" -C -1"
    pdbedit -P "maximum password age" -C -1

    # Allow password reuse.
    echo "samba-tool domain passwordsettings set --history-length=0"
    samba-tool domain passwordsettings set --history-length=0

    # Backup the idmap to the sysvol share, so slave(s) can load it.
    # see: https://wiki.samba.org/index.php/Joining_a_Samba_DC_to_an_Existing_Active_Directory#Built-in_User_.26_Group_ID_Mappings
    tdbbackup -s .bak $PRIVATE_DIR/idmap.ldb
    # Save the idmap so that slave controller(s) can access it.
    mkdir -p $STATEDIR/sysvol/provision
    cp -a $PRIVATE_DIR/idmap.ldb.bak $STATEDIR/sysvol/provision/

    # Create an unprivileged user for dhcp updates with a random password.
    samba-tool user create dhcpduser --description="Unprivileged user for TSIG-GSSAPI DNS updates via ISC DHCP server" --random-password

    # Set the the dhcp users password to never expire and add it to the DnsAdmins group.
    samba-tool user setexpiry dhcpduser --noexpiry
    samba-tool group addmembers DnsAdmins dhcpduser
  else

    # In order for dynamic dns updates to work after joining a slave, the master and slaves
    # must be fully synchronized. This will happen normally over time, but forcing it here
    # allows the dynamic update tests to complete successfully.
    echo "Manually replicating directory partitions."
    part="$(echo ${DOMAIN} | awk -F '.' '{print "dc=" $1 ",dc=" $2 ",dc=" $3}')"
    mast="$(host $MASTER_IP $MASTER_IP | grep "name pointer" | sed 's/^.*pointer //' | cut -d '.' -f 1)"
    if [ -n "$part" -a -n "${mast}" ]; then
      echo "samba-tool drs replicate ${mast} $HOST_NAME $part"
      if ! samba-tool drs replicate ${mast} $HOST_NAME $part ; then
        echo "Replication failed, continuing anyway!"
      else
        echo "Replication succeeded!"
      fi
    fi

    # If slave show replication status
    if ! samba-tool drs showrepl ; then
      echo "Show replication failed, continuing anyway!"
    fi
  fi

  # Alwyas run tests after initial provisioning.
  RUN_TESTS="true"

  # Export the dhcpd user keytab.
  if samba-tool domain exportkeytab --principal=dhcpduser@$REALM $PRIVATE_DIR/dhcpduser.keytab ; then
    # Change permissions on the dhcpduser keytab.
    chmod 400 $PRIVATE_DIR/dhcpduser.keytab
  else
    echo "Warning: exportkeytab for dhcpduser failed, continuing anyway!"
  fi

  # DNS update test.
  echo "$PASSWORD" | if ! kinit Administrator ; then
    echo "Cannot authenticate to domain controller."
    exit 1
  fi
  if ! samba_dnsupdate --all-names --fail-immediately ; then
    echo "DNS update (samba_dnsupdate) failed, continuing anyway!"
  else
    echo "DNS update (samba_dnsupdate) succeeded!"
  fi
}

append_run_options() {

  # Append default run options to samba-vars file.

  case $ID in
  fedora)
    . /etc/sysconfig/samba
    . /etc/sysconfig/named
    NAMEDOPTIONS="$OPTIONS"
    ;;
  ubuntu)
    [ -r /etc/default/samba ] && . /etc/default/samba
    . /etc/default/bind9
    NAMEDOPTIONS="$OPTIONS"
    ;;
  alpine)
    . /etc/conf.d/samba
    SAMBAOPTIONS="$samba_options"
    . /etc/conf.d/named
    NAMEDOPTIONS="$OPTS"
    ;;
  esac

  if ! grep 'SAMBAOPTIONS' $STATEDIR/samba-vars >/dev/null 2>&1 ; then
    echo "Adding default SAMBAOPTIONS run options to samba-vars file."
    cat >>$STATEDIR/samba-vars <<-__EOF__
	# Startup options for samba.
	SAMBAOPTIONS="$SAMBAOPTIONS"
	__EOF__
  fi

  if ! grep 'NAMEDOPTIONS' $STATEDIR/samba-vars >/dev/null 2>&1 ; then
    echo "Adding default NAMEDOPTIONS run options to samba-vars file."
    cat >>$STATEDIR/samba-vars <<-__EOF__
	# Startup options for named.
	NAMEDOPTIONS="$NAMEDOPTIONS"
	__EOF__
  fi
}

provision_bind() {

  echo "Bind Version:  $(named -v)"

  # Determine the named user (Linux distros use different ones).
  NAMED_USER="named"
  [ -n "$(id bind 2>/dev/null || true)" ] && NAMED_USER="bind"
  NAMED_GROUP="$(id $NAMED_USER -gn)"

  # Create a persistent named directory.
  echo "Creating persistent named directory in ${STATEDIR}."
  mkdir -p ${STATEDIR}/named
  [ -e /var/named-bak ] && cp -a /var/named-bak/. ${STATEDIR}/named
  [ -e /var/bind ]      && cp -a /var/bind/.      ${STATEDIR}/named
  chown $NAMED_USER:$NAMED_GROUP ${STATEDIR}/named

  append_run_options

  mkdir -p /var/named
  [ -e /etc/bind/rndc.key ] && cp -a /etc/bind/rndc.key /var/named/
  [ -e /etc/rndc.key ]      && cp -a /etc/rndc.key      /var/named/

  if [ ! -e /var/named/rndc.key ]; then
    echo "Generating rndc.key:"
    if /usr/sbin/rndc-confgen -a -A hmac-sha256 2>&1 ; then
      [ -e /etc/rndc.key ]      && cp -a /etc/rndc.key      /var/named/
      [ -e /etc/bind/rndc.key ] && cp -a /etc/bind/rndc.key /var/named/
      echo "Successfully created rndc.key file."
    else
      echo "Failed to create rndc.key file."
    fi
  fi

  chmod 640 /var/named/rndc.key
  chown -R root:$NAMED_GROUP /var/named/rndc.key

  mkdir -p /var/named/log
  mkdir -p /var/named/master

  bindir="$(dirname $0)"
  cp -a $bindir/artifacts/*.zone              /var/named/master/
  cp -a $bindir/artifacts/named.conf.logging  /var/named/

  SUBNETS=""; for n in ${ALLOWED_SUBNETS:-any}; do SUBNETS="$SUBNETS $n;" ; done
  FORWARDERS=""; for n in ${DNS_FORWARDERS:-8.8.8.8 8.8.4.4}; do FORWARDERS="$FORWARDERS $n;" ; done

  sed -e "s:\$ALLOWED_SUBNETS:$SUBNETS:" \
      -e "s:\$DNS_FORWARDERS:$FORWARDERS:" \
      -e "s:\$BINDDNS_DIR:${BINDDNS_DIR}:" \
  $bindir/artifacts/named.conf.tmpl > /var/named/named.conf

  # Fix ownership for newly created files and directories.
  chown -R        root:$NAMED_GROUP /var/named/
  chown -R $NAMED_USER:$NAMED_GROUP /var/named/log
  chown -R $NAMED_USER:$NAMED_GROUP /var/named/master
  chown    $NAMED_USER:$NAMED_GROUP /var/named/

  # Fix permissions.
  chmod 640 /var/named/named.conf
  chmod 640 /var/named/master/*.zone

  # Create the named.root file from the distro file, if it does not exist.
  if [ ! -r /var/named/named.root ]; then
    [ -L /var/named/named.root ] && rm -f /var/named/named.root
    NAMEDROOT="/var/bind/named.ca"
    [ "$ID" = "fedora" ] && NAMEDROOT="/var/named/named.ca"
    [ "$ID" = "ubuntu" ] && NAMEDROOT="/etc/bind/db.root"
    cp -p $NAMEDROOT /var/named/named.root
  fi

  # Make sure the krb5 config is readable by named.
  # This file gets copied to /etc on startup (Step 8).
  chown root:$NAMED_GROUP $PRIVATE_DIR/krb5.conf

  # Note: samba-tool join does not properly set ownership for ${BINDDNS_DIR}.
  chown root:$NAMED_GROUP ${BINDDNS_DIR}
}


#!/bin/sh

# samba-dc.sh - Provision and/or start samba domain controller.

set -e

start_service() {

  if [ -n "$SYSTEMD" ]; then
    systemctl start $1
  else
    if [ "$1" = "named" ]; then
      export KRB5RCACHETYPE="none"
      echo "named -u $NAMED_USER -c $ETCNAMED/named.conf $LOG_OPTIONS"
      if ! named -u $NAMED_USER -c $ETCNAMED/named.conf $LOG_OPTIONS ; then
        echo "Named startup failed!"
        ps aux | grep -i [Nn]amed
      fi
    else
      $1
    fi
  fi
}

stop_service() {

  if [ -n "$SYSTEMD" ]; then
    systemctl stop $1 || true
  else
    pidfile="/run/$1/$1.pid"
    [ -e /run/$1.pid ] && pidfile="/run/$1.pid"
    [ -e $pidfile ] && kill "$(cat $pidfile)" || true
  fi
}

# Note: This is also used by samba provisioning.
fixup_smb_config() {
  if [ "$BACKEND" = "BIND9_DLZ" ]; then
    # BIND9_DLZ, disable samba dns service.
    sed -i \
      -e "s:, dns$::" \
      -e "s:[^#]dns forwarder:\t#dns forwarder:" \
      /etc/samba/smb.conf
  else
    # SAMBA_INTERNAL, enable samba dns service.
    sed -i \
      -e "s:dnsupdate$:dnsupdate, dns:" \
      -e "s:#dns forwarder:dns forwarder:" \
      /etc/samba/smb.conf
    # samba_upgradedns deletes the dns user when changing to SAMBA_INTERNAL and creates a
    # new user when upgrading to BIND9_DLZ.  So, delete obsolete keytab if upgrading to SAMBA_INTERNAL.
    # A new one will be created if the domain is upgraded later back to BIND9_DLZ.
    if [ -e $PRIVATE_DIR/dns.keytab ]; then
      echo "Deleting obsolete dns.keytab file."
      rm $PRIVATE_DIR/dns.keytab
    fi
  fi
}

link_persistent_directories() {

  # The persistent samba directories will be created on the first run.
  if [ ! -d /srv/samba-dc/etc/samba ]; then
    echo "Creating persistent samba directories."
    mkdir -p /srv/samba-dc/etc/samba
    cp -a /etc/samba/. /srv/samba-dc/etc/samba/
    mkdir -p /srv/samba-dc/var/log/samba
    mkdir -p /srv/samba-dc/var/lib/samba
    cp -a $STATEDIR/. /srv/samba-dc/var/lib/samba/
    mkdir -p /srv/samba-dc/var/cache/samba
  fi

  # In a container these links are ephemeral and will be recreated on each run.
  if [ ! -L "/etc/samba" ]; then
    echo "Creating persistent samba directory links."
    mv /etc/samba /etc/samba-bak
    ln -s /srv/samba-dc/etc/samba       /etc/samba
    mv ${LOGFILEBASE} ${LOGFILEBASE}-bak
    ln -s /srv/samba-dc/var/log/samba   ${LOGFILEBASE}
    mv ${STATEDIR} ${STATEDIR}-bak
    ln -s /srv/samba-dc/var/lib/samba  ${STATEDIR}
    if [ "${CACHEDIR}" != "${STATEDIR}" ]; then
      mv ${CACHEDIR} ${CACHEDIR}-bak
      ln -s /srv/samba-dc/var/cache/samba ${CACHEDIR}
    fi
  fi

  # Determine bind directories to link.
  ETCNAMED="/etc/named"
  VARNAMED="/var/named"
  [ -d /etc/bind ] && ETCNAMED="/etc/bind"
  [ -d /var/bind ] && VARNAMED="/var/bind"
  # Debian uses /var/lib/bind
  [ -d /var/lib/bind ] && VARNAMED="/var/lib/bind"

  # The persistent bind directories will be created on the first run.
  if [ ! -d /srv/samba-dc/etc/named ]; then
    echo "Creating persistent bind directories."
    mkdir -p /srv/samba-dc/etc/named
    cp -a $ETCNAMED/. /srv/samba-dc/etc/named/
    mkdir -p /srv/samba-dc/var/named
    cp -a $VARNAMED/. /srv/samba-dc/var/named/
  fi

  # In a container these links are ephemeral and will be recreated on each run.
  if [ ! -L "${ETCNAMED}" ]; then
    echo "Creating persistent bind directory links."
    mv ${ETCNAMED} ${ETCNAMED}-bak
    ln -s /srv/samba-dc/etc/named   ${ETCNAMED}
    mv ${VARNAMED} ${VARNAMED}-bak
    # Note: always link /var/named to persistent directory (It is hard-coded in named.conf).
    ln -s /srv/samba-dc/var/named   /var/named
    # This eliminates spurious bind error message.
    mkdir -p /etc/rc.d/init.d
    touch /etc/rc.d/init.d/functions
    ln -sf /srv/samba-dc/etc/named/rndc.key /etc/rndc.key
  fi
}

update_named_root_servers() {

  if [ -z "$NAMED_ROOT_ONCE" ]; then
    # Update the named root servers.
    wget https://www.internic.net/zones/named.cache.md5 || touch named.cache.md5
    wget https://www.internic.net/zones/named.cache || touch named.cache
    NAMED_ROOT_CHANGED=""
    # Make sure the checksum is good before doing anything with the file.
    if [ "$(cat named.cache.md5)" = "$(md5sum named.cache | cut -d ' ' -f1 )" ]; then
      NAMED_ROOT_ONCE="true"
      mkdir -p /srv/samba-dc/var/named
      touch /srv/samba-dc/var/named/named.root
      # Only update the named root list if it has changed.
      if ! diff named.cache /srv/samba-dc/var/named/named.root >/dev/null; then
        echo "Named root server list has changed."
        cp -a named.cache         /srv/samba-dc/var/named/named.root
        chown ${NAMED_USER}:${NAMED_GROUP} /srv/samba-dc/var/named/named.root
        NAMED_ROOT_CHANGED="true"
      else
        echo "Named root server list has not changed, no need to update!"
      fi
    fi
    rm named.cache.md5
    rm named.cache
  fi
}

start_bind() {

  # See: https://wiki.samba.org/index.php/Setting_up_a_BIND_DNS_Server

  echo "Starting named."

  chown root:$NAMED_GROUP /etc/krb5.conf

  # This is needed for Debian/Ubuntu.
  mkdir -p /run/named
  chown ${NAMED_USER}:${NAMED_GROUP} /run/named

  echo "named-checkconf $ETCNAMED/named.conf"
  named-checkconf $ETCNAMED/named.conf

  [ -n "$BIND_LOG_LEVEL" ] && LOG_OPTIONS="-d $BIND_LOG_LEVEL"

  # Start bind.
  if [ -e /etc/sysconfig/named ]; then
    echo "Changing named service configuration file to '/etc/named/named.conf'."
    sed -i 's:# NAMEDCONF=.*:NAMEDCONF=/etc/named/named.conf:' /etc/sysconfig/named
    # Fix Fedora named option.  This prevents "replay errors" and is critical for nsupdate to work.
    # See: https://www.spinics.net/lists/samba/msg147046.html
    echo 'KRB5RCACHETYPE="none"' >> /etc/sysconfig/named
  fi

  start_service named

  # Wait for named to fully start.
  sleep 3s

  # Update the list of root servers.
  update_named_root_servers
  if [ -n "$NAMED_ROOT_CHANGED" ]; then
    echo "Restarting named to reload root servers."
    stop_service named
    sleep 2s
    start_service named
    sleep 5s
  fi

  # Verify named is responding to queries.
  if ! host -t A localhost $HOST_IP ; then
    echo "WARNING: named is not responding."
  fi
}

############################################################ Section: Main

echo "$(date '+%y-%m-%d %H:%M:%S') Starting Samba Active Directory Domain Controller."

# Delete files used by system unit test.
[ -e /srv/samba-dc/samba-status ] && rm -f /srv/samba-dc/samba-status
[ -e /srv/samba-dc/shutdown-request ] && rm -f /srv/samba-dc/shutdown-request

# Determine if we are running under init system (systemd or openRC).
if [ -n "$(ps aux | egrep '([ ]*[ ]1[ ]*root|root.*[ ]1[ ])' | grep /sbin/init)" ]; then
  echo "Running under systemd or openRC."
  SYSTEMD="true"
fi

. samba-set-vars
set_samba_vars

if [ -e /sbin/apk -a "$BACKEND" = "BIND9_DLZ" ]; then
  echo "Forcing backend to SAMBA_INTERNAL for Alpine Linux."
  BACKEND="SAMBA_INTERNAL"
fi

link_persistent_directories

# Set the local timezone.
if [ -n "$TIMEZONE" ]; then
  echo "Setting timezone to ${TIMEZONE}."
  ln -fs /usr/share/zoneinfo/$TIMEZONE /etc/localtime || true
fi

# The following are the configuration steps as described in
# https://wiki.samba.org/index.php/Setting_up_Samba_as_an_Active_Directory_Domain_Controller

# Step 1: Preparing the Installation

# Update the hosts file.
cat > /etc/hosts <<-__EOF__
	127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
	::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
	$HOST_IP    ${HOST_NAME}.$DOMAIN ${HOST_NAME}
	__EOF__

# Step 2: Installing Samba --- Not needed, already installed.

# Step 3: Provisioning Samba AD in Non-Interactive Mode (First run only).
if [ ! -f $PRIVATE_DIR/secrets.tdb ]; then
  . samba-provisioning
  save_backend="$BACKEND"
  if [ "$ROLE" != "master" ]; then
    if [ "$BACKEND" = "BIND9_DLZ" ]; then
      # Domain join with BIND9_DLZ incorrectly creates the dns account.
      echo "Forcing domain join to use SAMBA_INTERNAL backend."
      echo "Backend will be upgraded to BIND9_DLZ after the join."
      BACKEND="SAMBA_INTERNAL"
    fi
  fi
  provision
  BACKEND="$save_backend"
  # Create a bind config even if using SAMBA_INTERNAL backend.
  # This will allow switching to BIND9_DLZ at a later time.
  setup_bind_config
  PROVISIONED="true"
fi

# Step 7 (Out of order from docs): Configuring Kerberos
# This needs to be done before doing a samba_upgradedns.

cp -a $PRIVATE_DIR/krb5.conf /etc/
chmod 0644 /etc/krb5.conf

# Step 4: Setting up the AD DNS back end

# If the dns backend has changed, a samba dns upgrade is required.
if [ "$BACKEND" != "$(cat /etc/samba/backend  || true)" ]; then
  echo "DNS backend changed to: ${BACKEND}."
  fixup_smb_config
  samba_upgradedns --dns-backend=$BACKEND
  echo "$BACKEND" >/etc/samba/backend
fi

# If using bind backend, start bind.
[ "$BACKEND" = "BIND9_DLZ" ] && start_bind

# Step 5: Configuring the DNS Resolver

# Update the resolv.conf file.
cat > /etc/resolv.conf <<-__EOF__
	search $DOMAIN
	nameserver ${HOST_IP}
	__EOF__

# Step 8: Testing your Samba AD DC

echo "Starting samba."
if [ -n "$SYSTEMD" ]; then
  systemctl start samba
else
  samba
fi
echo "Samba started."

# Wait for samba to start.
sleep 5s

[ "$PROVISIONED" = "true" ] && post_provisioning

if [ "$(echo $RUN_TESTS | tr [a-z] [A-Z])" = "TRUE" ]; then
  . samba-tests
  test_samba
  test_stats
fi

echo "$(date '+%y-%m-%d %H:%M:%S') Done!"

# Indicates to system unit test that the server is ready.
echo "Started" > /srv/samba-dc/samba-status

# Check for shutdown request from system unit test.
while : ; do
  sleep 15s
  if [ -e /srv/samba-dc/shutdown-request ]; then
    stop_service samba
    [ "$BACKEND" = "BIND9_DLZ" ] && stop_service named
    break
  fi
done

echo "Exiting!"

exit 0


#!/bin/sh

# samba-start - Provision and/or start samba domain controller.

set -e

# Note: This is also used by samba provisioning.
fixup_smb_config() {
  if [ "$BACKEND" = "BIND9_DLZ" ]; then
    # BIND9_DLZ, disable samba dns service.
    sed -i \
      -e "s:, dns$::" \
      -e "s:[^#]dns forwarder:\t#dns forwarder:" \
      /etc/samba/smb.conf
  else
    # SAMBA_INTERNAL, enable samba dns service.
    sed -i \
      -e "s:dnsupdate$:dnsupdate, dns:" \
      -e "s:#dns forwarder:dns forwarder:" \
      /etc/samba/smb.conf
    # samba_upgradedns deletes the dns user when changing to SAMBA_INTERNAL and creates a
    # new user when upgrading to BIND9_DLZ.  So, delete obsolete keytab if upgrading to SAMBA_INTERNAL.
    # A new one will be created if the domain is upgraded later back to BIND9_DLZ.
    if [ -e $PRIVATE_DIR/dns.keytab ]; then
      echo "Deleting obsolete dns.keytab file."
      rm $PRIVATE_DIR/dns.keytab
    fi
  fi
}

start_bind() {

  # See: https://wiki.samba.org/index.php/Setting_up_a_BIND_DNS_Server

  echo "Starting named."

  chown root:$NAMED_GROUP /etc/krb5.conf

  # Setup bind service for distro.
  case $ID in
  ubuntu)
    [ -e /etc/bind/named.conf ] && mv -f /etc/bind/named.conf /etc/bind/named-bak.conf
    cp -a /var/named/named.conf /etc/bind/
    cp -a /var/named/rndc.key /etc/bind/
    [ ! -e /var/named/named.root ] && cp -a /etc/bind/db.root /var/named/named.root
    mkdir -p /run/named
    chown ${NAMED_USER}:${NAMED_GROUP} /run/named
    ;;
  fedora)
    [ -e /etc/named.conf ] && mv -f /etc/named.conf /etc/named-bak.conf
    cp -a /var/named/named.conf /etc/
    cp -a /var/named/rndc.key /etc/
    [ ! -e /var/named/named.root ] && cp -a /var/named/named.ca /var/named/named.root
    ;;
  alpine)
    cp -a /var/named/named.conf /etc/bind/
    cp -a /var/named/rndc.key /etc/bind/
    [ ! -e /var/named/named.root ] && cp -a /var/bind/named.ca /var/named/named.root
    mkdir -p /run/named
    chown ${NAMED_USER}:${NAMED_GROUP} /run/named
    ;;
  *)
    echo "Warning: Unsupported Linux Distro."
    ;;
  esac

  # Make sure the samba dlz config is readable by named.
  if [ "$(stat -c '%G' ${BINDDNS_DIR}/named.conf 2>/dev/null || true)" != "${NAMED_GROUP}" ]; then
    echo "Making ${BINDDNS_DIR}/named.conf readable by root:${NAMED_GROUP}."
    chown root:${NAMED_GROUP} ${BINDDNS_DIR}/named.conf
  fi

  echo "named-checkconf"
  named-checkconf

  [ -n "$BIND_LOG_LEVEL" ] && LOG_OPTIONS="-d $BIND_LOG_LEVEL"

  # Start bind.
  if [ -e /etc/sysconfig/named ]; then
    # Fix Fedora named option.  This prevents "replay errors" and is critical for nsupdate to work.
    if [ -z "$(grep KRB5RCACHETYPE /etc/sysconfig/named)" ]; then
      echo "Setting KRB5RCACHETYPE='none' in /etc/sysconfig/named."
      echo 'KRB5RCACHETYPE="none"' >> /etc/sysconfig/named
    fi
  fi

  # Go ahead and export this.  It is only needed for MIT Kerberos, but it is harmless otherwise.
  # See: https://bugzilla.samba.org/show_bug.cgi?id=13066
  export KRB5RCACHETYPE="none"

  if [ -e /sbin/apk ]; then
    # TODO Temporary code for Alpine testing.
    sed -i 's:/bind9/dlz_bind9_11.so";:/bind9/dlz_bind9_11.so -d 5";:' ${BINDDNS_DIR}/named.conf
    sed -i 's:/bind9/dlz_bind9_12.so";:/bind9/dlz_bind9_12.so -d 5";:' ${BINDDNS_DIR}/named.conf
    chown ${NAMED_USER}:${NAMED_GROUP} ${BINDDNS_DIR}/named.conf
  fi
  echo "Starting named."

  if [ "$ID" = "fedora" ]; then
    # This prevents a spurious error message in the logs when running in fedora and is harmless.
    mkdir -p /etc/rc.d/init.d
    touch /etc/rc.d/init.d/functions
  fi

  start_service named

  # Wait for named to fully start.
  sleep 3s

  # Verify named is responding to queries.
  if ! host -t A localhost $HOST_IP ; then
    echo "WARNING: named is not responding."
  fi
}

set_server_status() {

  echo "Setting server status to $1."
  echo "$1" > /var/lib/samba/samba-status
}

# Start

echo "$(date '+%y-%m-%d %H:%M:%S') Starting Samba Active Directory Domain Controller."

# Indicates to system unit test that the server is starting.
set_server_status "Starting"

# Determine the named user (Linux distros use different ones).
NAMED_USER="named"
[ -n "$(id bind 2>/dev/null || true)" ] && NAMED_USER="bind"
NAMED_GROUP="$(id $NAMED_USER -gn)"

echo "Bind Version:  $(named -v)"

# Utils provide start_service, stop_service and check_init functions.
. samba-utils

if [ -e /sbin/apk ]; then
  check_init
  if [ "$SYSINIT" = "true" ]; then
    mkdir -p /run/samba
  else
    echo "Starting busybox syslog in Alpine."
    syslogd
  fi
  echo "Forcing backend to SAMBA_INTERNAL for Alpine Linux."
  BACKEND="SAMBA_INTERNAL"
fi

. samba-set-vars
set_samba_vars

# Create a persistent config directory.
if [ ! -d ${STATEDIR}/config ]; then
  echo "Creating persistent config directory in ${STATEDIR}."
  mkdir -p ${STATEDIR}/config
  cp -a /etc/samba/. ${STATEDIR}/config
fi

# Link /etc/samba to the persistent config directory.
if [ ! -L "/etc/samba" ]; then
  echo "Linking /etc/samba to the persistent config directory."
  [ -d /etc/samba ] && mv /etc/samba /etc/samba-bak
  ln -s ${STATEDIR}/config /etc/samba
else
  # This will happen if the container is (re)started without being removed first (e.g. docker-compose up).
  echo "/etc/samba already linked."
fi

# Create a persistent named directory.
if [ ! -d ${STATEDIR}/named ]; then
  echo "Creating persistent named directory in ${STATEDIR}."
  mkdir -p ${STATEDIR}/named
  [ -e /var/named ] && cp -a /var/named/. ${STATEDIR}/named
  [ -e /var/bind ]  && cp -a /var/bind/.  ${STATEDIR}/named
  chown $NAMED_USER:$NAMED_GROUP ${STATEDIR}/named
fi

# Link /var/named to the persistent directory.
if [ ! -L "/var/named" ]; then
  echo "Linking /var/named to the persistent directory."
  [ -d /var/named ] && mv /var/named /var/named-bak
  ln -s ${STATEDIR}/named /var/named
else
  # This will happen if the container is (re)started without being removed first (e.g. docker-compose up).
  echo "/var/named already linked."
fi

# Set the local timezone.
if [ -n "$TIMEZONE" ]; then
  if [ -e /usr/share/zoneinfo/$TIMEZONE ]; then
    echo "Setting timezone to ${TIMEZONE}."
    ln -fs /usr/share/zoneinfo/$TIMEZONE /etc/localtime
  else
    echo "Timezone ${TIMEZONE} not found, not changing timezone."
  fi
fi

# The following are the configuration steps as described in
# https://wiki.samba.org/index.php/Setting_up_Samba_as_an_Active_Directory_Domain_Controller

# Step 1: Preparing the Installation

# Update the hosts file.
cat > /etc/hosts <<-__EOF__
	127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
	::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
	$HOST_IP    ${HOST_NAME}.$DOMAIN ${HOST_NAME}
	__EOF__

# Step 2: Installing Samba --- Not needed, already installed.

# Step 3: Provisioning Samba AD in Non-Interactive Mode (First run only).
if [ ! -f $PRIVATE_DIR/krb5.conf ]; then
  . samba-provisioning
  save_backend="$BACKEND"
  if [ "$ROLE" != "master" ]; then
    if [ "$BACKEND" = "BIND9_DLZ" ]; then
      # Domain join with BIND9_DLZ incorrectly creates the dns account.
      # See: https://bugzilla.samba.org/show_bug.cgi?id=13926
      echo "Forcing domain join to use SAMBA_INTERNAL backend."
      echo "Backend will be upgraded to BIND9_DLZ after the join."
      BACKEND="SAMBA_INTERNAL"
    fi
  fi
  provision
  # Record the provisioned backend.
  echo "$BACKEND" >/var/lib/samba/backend
  BACKEND="$save_backend"
  # Create a bind config even if using SAMBA_INTERNAL backend.
  # This will allow switching to BIND9_DLZ at a later time.
  setup_bind_config
  PROVISIONED="true"
fi

# Step 7 (Out of order from docs): Configuring Kerberos
# This needs to be done before doing a samba_upgradedns.

cp -a $PRIVATE_DIR/krb5.conf /etc/
chmod 0644 /etc/krb5.conf

# Step 4: Setting up the AD DNS back end

# If the dns backend has changed, a samba dns upgrade is required.
if [ "$BACKEND" != "$(cat /var/lib/samba/backend  || true)" ]; then
  echo "DNS backend changed to: ${BACKEND}."
  fixup_smb_config
  samba_upgradedns --dns-backend=$BACKEND
  echo "$BACKEND" >/var/lib/samba/backend
fi

# If using bind backend, start bind.
[ "$BACKEND" = "BIND9_DLZ" ] && start_bind

# Step 5: Configuring the DNS Resolver

# Update the resolv.conf file.
cat > /etc/resolv.conf <<-__EOF__
	search $DOMAIN
	nameserver ${HOST_IP}
	__EOF__

# Step 8: Testing your Samba AD DC

echo "Starting samba."
start_service samba
echo "Samba started."

# Wait for samba to start.
sleep 3s

[ "$PROVISIONED" = "true" ] && post_provisioning

if [ "$(echo $RUN_TESTS | tr [a-z] [A-Z])" = "TRUE" ]; then
  . samba-tests
  test_samba
  test_stats
fi

echo "$(date '+%y-%m-%d %H:%M:%S') Done!"

# Indicates to system unit test that the server is ready.
set_server_status "Running"

exit 0

